%{
    #include <cstdio>
    #include <cstdlib>

    #include "ast.hpp"
    #include "primitive.hpp"
    #include "symtab.hpp"

    #define YYDEBUG 1

    extern Program_ptr ast;
    int yylex(void);
    void yyerror(const char *);
%}

/* Enables verbose error messages */
%error-verbose

/** WRITE ME:
 *  - Put all your token definitions here
 *  - Put all your type definitions here
 *  - Put all your precedence/associativity rules here
 */

%left T_OR T_AND T_LT T_LTE T_GT T_GTE T_NOTEQ T_EQEQ T_PLUS T_MINUS

%left T_ID T_STRING T_CHARACTER

%right T_NOT

%token T_BOOL T_CHAR T_INT T_STR T_INTPTR T_CHARPTR T_IF T_ELSE T_WHILE
%token T_VAR T_PROC T_RET T_NULL T_AND T_FSLASH T_EQ T_EQEQ T_GT T_GTE
%token T_LT T_LTE T_NOT T_NOTEQ T_OR T_ADDRESS T_DEREF T_TRUE T_FALSE
%token T_ID T_INTBIN T_INTOCT T_INTDEC T_INTHEX T_STRING T_CHARACTER
%token T_PLUS T_MINUS T_TIMES

%start Start


%%

Start:         Function
	       { ast = new ProgramImpl($1.u_proc_list); }
              ;

Function:     Function T_PROC ID '(' VariableDeclaration ')' T_RET VariableType Body
	      { ($1.u_proc_list)->push_back(new ProcImpl($3.u_symname, $5.u_decl_list, $8.u_type, $9.u_procedure_block));
	      	$$ = $1; }
		
	      | T_PROC ID '(' VariableDeclaration ')' T_RET VariableType Body
	      { $$.u_proc_list = new std::list<Proc_ptr>();
	        ($$.u_proc_list)->push_back(new ProcImpl($2.u_symname, $4.u_decl_list, $7.u_type, $8.u_procedure_block)); }
	      ;

Body:         '{' Function VariableDeclaration3 Body2 Return '}'
	      { $$.u_procedure_block = new Procedure_blockImpl($2.u_proc_list, $3.u_decl_list, $4.u_stat_list, $5.u_return_stat); }
	      
	      | '{' Function Body2 Return '}'
	      { $$.u_procedure_block = new Procedure_blockImpl($2.u_proc_list, new std::list<Decl_ptr>(), $3.u_stat_list, $4.u_return_stat); }

 	      | '{' Function VariableDeclaration3 Return '}'
	      { $$.u_procedure_block = new Procedure_blockImpl($2.u_proc_list, $3.u_decl_list, new std::list<Stat_ptr>(), $4.u_return_stat); }
	      
	      | '{' Function Return '}'
	      { $$.u_procedure_block = new Procedure_blockImpl($2.u_proc_list, new std::list<Decl_ptr>(), new std::list<Stat_ptr>(), $3.u_return_stat); }	      

	      | '{' VariableDeclaration3 Return '}'
	      { $$.u_procedure_block = new Procedure_blockImpl(new std::list<Proc_ptr>(), $2.u_decl_list, new std::list<Stat_ptr>(), $3.u_return_stat); }

	      | '{' VariableDeclaration3 Body2 Return '}'
	      { $$.u_procedure_block = new Procedure_blockImpl(new std::list<Proc_ptr>(), $2.u_decl_list, $3.u_stat_list, $4.u_return_stat); }

	      | '{' Body2 Return '}'
	      { $$.u_procedure_block = new Procedure_blockImpl(new std::list<Proc_ptr>(), new std::list<Decl_ptr>(), $2.u_stat_list, $3.u_return_stat); }

	      | '{' Return '}'
	      { $$.u_procedure_block = new Procedure_blockImpl(new std::list<Proc_ptr>(), new std::list<Decl_ptr>(), new std::list<Stat_ptr>(), $2.u_return_stat); }
	      ;


Body2:        Body2 IfWhile
	      { ($1.u_stat_list)->push_back($2.u_stat);
	      	$$ = $1; }
			      
	      | IfWhile
	      { $$.u_stat_list = new std::list<Stat_ptr>();
	      	($$.u_stat_list)->push_back($1.u_stat); }

              | Body2 Statement
	      { ($1.u_stat_list)->push_back($2.u_stat);
	      	$$ = $1; }

	      | Statement
	      { $$.u_stat_list = new std::list<Stat_ptr>();
	      	($$.u_stat_list)->push_back($1.u_stat); }

	      | Body2 Body3
	      { ($1.u_stat_list)->push_back($2.u_stat);
	      	$$ = $1; }

	      | Body3
	      { $$.u_stat_list = new std::list<Stat_ptr>();
	      	($$.u_stat_list)->push_back($1.u_stat); }
	      ;


Body3:        '{' VariableDeclaration3 Body2 '}'
	      { $$.u_stat = new CodeBlock(new Nested_blockImpl($2.u_decl_list, $3.u_stat_list)); }
	      
	      | '{' VariableDeclaration3 '}'
	      { $$.u_stat = new CodeBlock(new Nested_blockImpl($2.u_decl_list, new std::list<Stat_ptr>())); }

	      | '{' Body2 '}'
	      { $$.u_stat = new CodeBlock(new Nested_blockImpl(new std::list<Decl_ptr>(),$2.u_stat_list)); }

	      | '{''}'
	      { $$.u_stat = new CodeBlock(new Nested_blockImpl(new std::list<Decl_ptr>,new std::list<Stat_ptr>)); }
	      ;

Statement:    Assignment ';'
	      { $$.u_stat = $1.u_stat; }

	      | FunctionStatement ';'
	      { $$.u_stat = $1.u_stat; }
	      ;

Expression:   Expression T_PLUS Term
	      { $$.u_expr = new Plus($1.u_expr, $3.u_expr); }
	      
              | Expression T_MINUS Term
	      { $$.u_expr = new Minus($1.u_expr, $3.u_expr); }

	      | Term
	      { $$.u_expr = $1.u_expr; }
	      ;

Term:         Term T_TIMES Factor
	      { $$.u_expr = new Times($1.u_expr, $3.u_expr); }
		
              | Term T_FSLASH Factor
	      { $$.u_expr = new Div($1.u_expr, $3.u_expr); }

	      | Term T_AND Factor
	      { $$.u_expr = new And($1.u_expr, $3.u_expr); }

	      | Term T_OR Factor
	      { $$.u_expr = new Or($1.u_expr, $3.u_expr); }

	      | Term T_EQEQ Factor
	      { $$.u_expr = new Compare($1.u_expr, $3.u_expr); }
	      
	      | Term T_LTE Factor
	      { $$.u_expr = new Lteq($1.u_expr, $3.u_expr); }

	      | Term T_LT Factor
	      { $$.u_expr = new Lt($1.u_expr, $3.u_expr); }

	      | Term T_GTE Factor
	      { $$.u_expr = new Gteq($1.u_expr, $3.u_expr); }

	      | Term T_GT Factor
	      { $$.u_expr = new Gt($1.u_expr, $3.u_expr); }

	      | Term T_NOTEQ Factor
	      { $$.u_expr = new Noteq($1.u_expr, $3.u_expr); }

	      | Factor
	      { $$.u_expr = $1.u_expr; }
	      ;

Factor:       '(' Expression ')'
	      { $$.u_expr = $2.u_expr; }

              | Integers
 	      { $$.u_expr = new IntLit($1.u_primitive); }
 
	      | T_MINUS Factor
	      { $$.u_expr = new Uminus($2.u_expr); }

	      | T_PLUS Factor
	      { $$.u_expr = $2.u_expr; }
	      
	      | T_DEREF Factor
	      { $$.u_expr = new Deref($2.u_expr); }

	      | T_NOT Factor
	      { $$.u_expr = new Not($2.u_expr); }

	      | T_FALSE
	      { $$.u_expr = new BoolLit(new Primitive(yylval.u_base_int)); }

	      | T_TRUE
	      { $$.u_expr = new BoolLit(new Primitive(yylval.u_base_int)); } 

	      | ID
	      { $$.u_expr = new Ident($1.u_symname); }

	      | IDArrAcc
	      { $$.u_expr = $1.u_expr; }

	      | T_CHARACTER
	      { $$.u_expr = new CharLit(new Primitive(yylval.u_base_int)); }

	      | T_ADDRESS Factor
	      { $$.u_expr = new Not($2.u_expr); }

	      | '|' Factor '|'
	      { $$.u_expr = new AbsoluteValue($2.u_expr); }

	      | T_NULL
	      { $$.u_expr = new IntLit(new Primitive(0)); }
	      ;

Assignment:   IDArrEle T_EQ Expression
	      { $$.u_stat = new Assignment($1.u_lhs, $3.u_expr); }

	      | ID T_EQ Expression
	      { $$.u_stat = new Assignment(new Variable($1.u_symname), $3.u_expr); }

	      | ID T_EQ T_STRING
	      { $$.u_stat = new StringAssignment(new Variable($1.u_symname), new StringPrimitive(yylval.u_base_charptr)); }
	      ;

Integers:     T_INTBIN
	      { $$.u_primitive = new Primitive(yylval.u_base_int); }
	      
              | T_INTOCT
	      { $$.u_primitive = new Primitive(yylval.u_base_int); }

	      | T_INTDEC
	      { $$.u_primitive = new Primitive(yylval.u_base_int); }
	      
	      | T_INTHEX
	      { $$.u_primitive = new Primitive(yylval.u_base_int); }
	      ;

VariableType: T_INT
	      { $$.u_type = new TInteger(); }
	      
	      | T_INTPTR
	      { $$.u_type = new TIntPtr(); }

	      | T_BOOL
	      { $$.u_type = new TBoolean(); }
 
	      | T_STR '[' Integers ']'
	      {	$$.u_type = new TString($3.u_primitive); }
		
	      | T_CHAR
	      { $$.u_type = new TCharacter(); }

	      | T_CHARPTR
	      { $$.u_type = new TCharPtr(); }
	      ;

VariableDeclaration: VariableDeclaration2
		     { $$.u_decl_list = $1.u_decl_list; }
			
		     |
		     { $$.u_decl_list = new std::list<Decl_ptr>(); }
		     ;

VariableDeclaration2: VariablesDeclaration VariableType
		      { $$.u_decl_list = new std::list<Decl_ptr>(); 
		       ($$.u_decl_list)->push_back(new DeclImpl($1.u_symname_list, $2.u_type)); }

		      | VariableDeclaration2 ';' VariablesDeclaration VariableType
		      {	($1.u_decl_list)->push_back(new DeclImpl($3.u_symname_list, $4.u_type)); 
			$$ = $1; }
		      ;

VariableDeclaration3: T_VAR VariablesDeclaration VariableType ';'
		      { $$.u_decl_list = new std::list<Decl_ptr>();
		      	($$.u_decl_list)->push_back(new DeclImpl($2.u_symname_list, $3.u_type)); }
		      
		      | VariableDeclaration3 T_VAR VariablesDeclaration VariableType ';'
		      { ($1.u_decl_list)->push_back(new DeclImpl($3.u_symname_list, $4.u_type));
		      	$$ = $1; }
		      ;

VariablesDeclaration:  VariablesDeclaration VariablesDeclaration1
		       { ($1.u_symname_list)->push_back($2.u_symname);
		       	 $$ = $1; }

		       |
		       { $$.u_symname_list = new std::list<SymName_ptr>(); }
		       ;

VariablesDeclaration1: ID ','
		       { $$.u_symname = $1.u_symname; }

		       | ID ':'
		       { $$.u_symname = $1.u_symname; }
		       ;       


IfWhile:      T_IF '(' Expression ')' '{' Body2 '}'
	      { $$.u_stat = new IfNoElse($3.u_expr, new Nested_blockImpl(new std::list<Decl_ptr>(), $6.u_stat_list)); }

	      | T_IF '(' Expression ')' '{' '}'
	      { $$.u_stat = new IfNoElse($3.u_expr, new Nested_blockImpl(new std::list<Decl_ptr>(), new std::list<Stat_ptr>())); }

	      | T_IF '(' Expression ')' '{' Body2 '}' Else
	      { $$.u_stat = new IfWithElse($3.u_expr, new Nested_blockImpl(new std::list<Decl_ptr>(), $6.u_stat_list), $8.u_nested_block); }

	      | T_WHILE '(' Expression ')' '{' '}'
	      { $$.u_stat = new WhileLoop($3.u_expr, new Nested_blockImpl(new std::list<Decl_ptr>(), new std::list<Stat_ptr>())); }

	      | T_WHILE '(' Expression ')' '{' Body2 '}'
	      { $$.u_stat = new WhileLoop($3.u_expr, new Nested_blockImpl(new std::list<Decl_ptr>(), $6.u_stat_list)); }

	      | T_IF '(' Expression ')' '{' VariableDeclaration3 Body2 '}'
	      { $$.u_stat = new IfNoElse($3.u_expr, new Nested_blockImpl($6.u_decl_list, $7.u_stat_list)); }

	      | T_IF '(' Expression ')' '{' VariableDeclaration3 Body2 '}' Else
	      { $$.u_stat = new IfWithElse($3.u_expr, new Nested_blockImpl($6.u_decl_list, $7.u_stat_list), $9.u_nested_block); }

	      | T_WHILE '(' Expression ')' '{' VariableDeclaration3 Body2 '}'
	      { $$.u_stat = new WhileLoop($3.u_expr, new Nested_blockImpl($6.u_decl_list, $7.u_stat_list)); }

	      | T_IF '(' Expression ')' '{' '}' Else
	      {	$$.u_stat = new IfWithElse($3.u_expr, new Nested_blockImpl(new std::list<Decl_ptr>(), new std::list<Stat_ptr>()), $7.u_nested_block); }
	      ;

Else:         T_ELSE '{' Body2 '}'
	      { $$.u_nested_block = new Nested_blockImpl(new std::list<Decl_ptr>(), $3.u_stat_list); }

	      | T_ELSE '{' VariableDeclaration3 '}'
	      { $$.u_nested_block = new Nested_blockImpl($3.u_decl_list, new std::list<Stat_ptr>); }

	      | T_ELSE '{' VariableDeclaration3 Body2 '}'
	      { $$.u_nested_block = new Nested_blockImpl($3.u_decl_list, $4.u_stat_list); }

	      | T_ELSE '{' '}'
	      { $$.u_nested_block = new Nested_blockImpl(new std::list<Decl_ptr>(), new std::list<Stat_ptr>()); }
	      ;
	      
ID:           T_ID
	      { $$.u_symname = new SymName(yylval.u_base_charptr); }
	      ;

IDArrEle:     T_ID '[' Expression ']'
	      { $$.u_lhs = new ArrayElement(new SymName($1.u_base_charptr), $3.u_expr); }
	      ;


IDArrAcc:     T_ID '[' Expression ']'
	      { $$.u_expr = new ArrayAccess(new SymName($1.u_base_charptr), $3.u_expr); }
	      ;


FunctionStatement:   ID T_EQ ID '(' FunctionExpression1 ')'
		     { $$.u_stat = new Call(new Variable($1.u_symname), $3.u_symname, $5.u_expr_list); }

		     | IDArrEle T_EQ ID '(' FunctionExpression1 ')'
		     { $$.u_stat = new Call($1.u_lhs, $3.u_symname, $5.u_expr_list); }
		     ;


FunctionExpression1: FunctionExpression
		     { $$.u_expr_list = $1.u_expr_list; }
		     
		     |
		     { $$.u_expr_list = new std::list<Expr_ptr>(); }
		     ;

FunctionExpression:  Expression ',' FunctionExpression
		     { ($3.u_expr_list)->push_back($1.u_expr);
		       $$ = $3; }
			
		     | Expression
		     { $$.u_expr_list = new std::list<Expr_ptr>();
		       ($$.u_expr_list)->push_back($1.u_expr) ; }
		     ;

Return:              T_RET Expression ';'
		     { $$.u_return_stat = new Return($2.u_expr); }
		     ;



%%




/** You shall not pass!
 *  You should not  have to do or edit anything past this.
 */

extern int yylineno;

void yyerror(const char *s)
{
    fprintf(stderr, "%s at line %d\n", s, yylineno);
    return;
}
